{"version":3,"sources":["components/ButtonFeedback.jsx","components/Notification.jsx","components/Section.jsx","components/Statistics.jsx","App.js","index.js"],"names":["ButtonFeedback","btnName","countFeedback","map","name","onClick","Notification","message","Section","children","title","Statistics","good","neutral","bad","total","percentage","App","useState","setGood","setNeutral","setBad","countTotalFeedback","type","prevState","Math","floor","ReactDOM","render","document","getElementById"],"mappings":"gNAeeA,EAZQ,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,cACjC,OAAOD,EAAQE,KAAI,SAACC,GAAD,OACjB,wBAAQC,QAAS,kBAAMH,EAAcE,IAArC,SACGA,GAD8CA,OCMtCE,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,6BAAKA,KCaCC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC3B,OACE,oCACE,6BAAKA,IACJD,MCgBQE,EApBI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC/C,OACE,qCACE,sCAASJ,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACV,mDAAsBC,EAAtB,WCHS,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAON,EAAP,KAAaO,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOL,EAAP,KAAgBO,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOJ,EAAP,KAAYO,EAAZ,KAkBMC,EAAqB,WACzB,OAAOV,EAAOC,EAAUC,GAQ1B,OACE,qCACE,cAAC,EAAD,CAASJ,MAAM,wBAAf,SACE,cAAC,EAAD,CAAgBR,cA5BA,SAACqB,GACrB,OAAQA,GACN,IAAK,OACHJ,GAAQ,SAACK,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHJ,GAAW,SAACI,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHH,GAAO,SAACG,GAAD,OAAeA,EAAY,KAClC,MAEF,QACE,SAe8CvB,QALtC,CAAC,OAAQ,UAAW,WAO9B,cAAC,EAAD,CAASS,MAAM,aAAf,SACIY,IAGA,cAAC,EAAD,CACEV,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOO,IACPN,WAnBDS,KAAKC,MAAc,IAAPd,EAAcU,OAY3B,cAAC,EAAD,CAAcf,QAAQ,2BCvChCoB,IAASC,OAAO,cAACX,EAAD,IAASY,SAASC,eAAe,U","file":"static/js/main.5daf8611.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ButtonFeedback = ({ btnName, countFeedback }) => {\n  return btnName.map((name) => (\n    <button onClick={() => countFeedback(name)} key={name}>\n      {name}\n    </button>\n  ));\n};\nButtonFeedback.propTypes = {\n  btnName: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  countFeedback: PropTypes.func.isRequired,\n};\n\nexport default ButtonFeedback;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <h4>{message}</h4>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ children, title }) => {\n  return (\n    <section>\n      <h1>{title}</h1>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, percentage }) => {\n  return (\n    <>\n      <p>Good:{good}</p>\n      <p>Neutral:{neutral}</p>\n      <p>Bad:{bad}</p>\n      <p>Total:{total}</p>\n      <p>Positive Feedback:{percentage}%</p>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  percentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import { useState } from \"react\";\n\nimport ButtonFeedback from \"./components/ButtonFeedback\";\nimport Notification from \"./components/Notification\";\nimport Section from \"./components/Section\";\nimport Statistics from \"./components/Statistics\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countFeedback = (type) => {\n    switch (type) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n  const countPositiveFeedbackPercentage = () => {\n    return Math.floor((good * 100) / countTotalFeedback());\n  };\n\n  const state = [\"good\", \"neutral\", \"bad\"];\n\n  return (\n    <>\n      <Section title=\"Pleace leave feedback\">\n        <ButtonFeedback countFeedback={countFeedback} btnName={state} />\n      </Section>\n      <Section title=\"Statistics\">\n        {!countTotalFeedback() ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            percentage={countPositiveFeedbackPercentage()}\n          />\n        )}\n      </Section>\n    </>\n  );\n}\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n//   countFeedback = (type) => {\n//     this.setState((prevState) => ({\n//       [type]: prevState[type] + 1,\n//     }));\n//   };\n//   countTotalFeedback = () => {\n//     return this.state.good + this.state.neutral + this.state.bad;\n//   };\n//   countPositiveFeedbackPercentage = () => {\n//     return Math.floor((this.state.good * 100) / this.countTotalFeedback());\n//   };\n//   render() {\n//     const btnName = Object.keys(this.state);\n//     const total = this.countTotalFeedback();\n//     return (\n//       <>\n//         <Section title=\"Pleace leave feedback\">\n//           <ButtonFeedback\n//             countFeedback={this.countFeedback}\n//             btnName={btnName}\n//           />\n//         </Section>\n//         <Section title=\"Statistics\">\n//           {!total ? (\n//             <Notification message=\"No feedback given\" />\n//           ) : (\n//             <Statistics\n//               good={this.state.good}\n//               neutral={this.state.neutral}\n//               bad={this.state.bad}\n//               total={this.countTotalFeedback()}\n//               percentage={this.countPositiveFeedbackPercentage()}\n//             />\n//           )}\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}